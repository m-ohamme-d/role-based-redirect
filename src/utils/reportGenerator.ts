
interface Employee {
  id: number | string;
  name: string;
  department?: string;
  position?: string;
  performance?: number;
  rating?: number;
  email?: string;
}

interface ReportData {
  employees: Employee[];
  department?: string;
  teamLead?: string;
  reportType: string;
  dateRange: string;
}

export const generatePDFContent = (data: ReportData) => {
  const { employees, department, teamLead, reportType, dateRange } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  let content = `PERFORMANCE REPORT
${reportType.toUpperCase()}
${department ? `Department: ${department}` : ''}
${teamLead ? `Team Lead: ${teamLead}` : ''}
Generated on: ${timestamp}
Period: ${dateRange}

========================================

TEAM PERFORMANCE RATING SUMMARY
========================================

`;

  if (employees.length > 0) {
    employees.forEach((employee, index) => {
      const rating = employee.performance || employee.rating || 0;
      const stars = '★'.repeat(Math.floor(rating / 20)) + '☆'.repeat(5 - Math.floor(rating / 20));
      
      content += `${index + 1}. ${employee.name}
   Position: ${employee.position || 'Not specified'}
   ${department ? `Department: ${department}` : ''}
   Performance: ${rating}% ${stars}
   Email: ${employee.email || 'Not available'}

`;
    });

    // Add summary statistics
    const avgPerformance = employees.reduce((sum, emp) => sum + (emp.performance || emp.rating || 0), 0) / employees.length;
    const topPerformer = employees.reduce((top, emp) => 
      (emp.performance || emp.rating || 0) > (top.performance || top.rating || 0) ? emp : top
    );

    content += `
========================================
SUMMARY STATISTICS
========================================

Total Employees: ${employees.length}
Average Performance: ${avgPerformance.toFixed(1)}%
Top Performer: ${topPerformer.name} (${topPerformer.performance || topPerformer.rating || 0}%)

Performance Distribution:
- Excellent (90-100%): ${employees.filter(e => (e.performance || e.rating || 0) >= 90).length}
- Good (80-89%): ${employees.filter(e => (e.performance || e.rating || 0) >= 80 && (e.performance || e.rating || 0) < 90).length}
- Average (70-79%): ${employees.filter(e => (e.performance || e.rating || 0) >= 70 && (e.performance || e.rating || 0) < 80).length}
- Below Average (<70%): ${employees.filter(e => (e.performance || e.rating || 0) < 70).length}
`;
  } else {
    content += 'No employee data available for this report.';
  }

  content += `

========================================
Report generated by Management System
${timestamp}
========================================`;

  return content;
};

export const generateExcelContent = (data: ReportData) => {
  const { employees, department, teamLead, reportType, dateRange } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  let content = `Report Type,${reportType}\n`;
  content += `Department,${department || 'All Departments'}\n`;
  content += `Team Lead,${teamLead || 'N/A'}\n`;
  content += `Generated On,${timestamp}\n`;
  content += `Period,${dateRange}\n\n`;

  // Headers
  content += 'Employee ID,Name,Position,Department,Performance Score,Rating,Email\n';

  // Data rows
  employees.forEach(employee => {
    const performance = employee.performance || employee.rating || 0;
    const rating = performance >= 90 ? 'Excellent' : 
                  performance >= 80 ? 'Good' : 
                  performance >= 70 ? 'Average' : 'Below Average';
    
    content += `${employee.id},"${employee.name}","${employee.position || 'Not specified'}","${department || employee.department || 'Not specified'}",${performance}%,${rating},"${employee.email || 'Not available'}"\n`;
  });

  return content;
};

export const downloadFile = (content: string, filename: string, mimeType: string) => {
  try {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    return true;
  } catch (error) {
    console.error('Download failed:', error);
    return false;
  }
};
