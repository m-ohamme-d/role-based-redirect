interface Employee {
  id: number | string;
  name: string;
  department?: string;
  position?: string;
  performance?: number;
  rating?: number;
  email?: string;
  projects?: string[];
  skills?: string[];
  joinDate?: string;
  lastReview?: string;
}

interface Client {
  id: number;
  name: string;
  company: string;
  status: string;
  departments: string[];
  tags: string[];
  projects: any[];
  contactEmail: string;
  contactPhone: string;
}

interface Project {
  id: number;
  name: string;
  status: string;
  assignedDepartment: string;
  clientName: string;
  progress?: number;
  startDate?: string;
  expectedCompletion?: string;
  teamMembers?: string[];
  budget?: string;
  priority?: string;
}

interface ReportData {
  employees?: Employee[];
  clients?: Client[];
  projects?: Project[];
  department?: string;
  teamLead?: string;
  reportType: string;
  dateRange: string;
  userRole?: string;
  restrictedAccess?: boolean;
  generatedBy?: string;
}

export const generatePDFContent = (data: ReportData) => {
  const { employees = [], clients = [], projects = [], department, teamLead, reportType, dateRange, userRole, restrictedAccess, generatedBy } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  let content = `COMPREHENSIVE PERFORMANCE REPORT
${reportType.toUpperCase()}
${department ? `Department: ${department}` : ''}
${teamLead ? `Team Lead: ${teamLead}` : ''}
${generatedBy ? `Generated by: ${generatedBy}` : userRole ? `Generated by: ${userRole}` : ''}
Generated on: ${timestamp}
Period: ${dateRange}
${restrictedAccess ? 'ACCESS LEVEL: RESTRICTED TO DEPARTMENT ONLY' : ''}

========================================

EXECUTIVE SUMMARY
========================================
Total Team Members: ${employees.length}
Average Performance Score: ${employees.length > 0 ? (employees.reduce((sum, emp) => sum + (emp.performance || emp.rating || 0), 0) / employees.length).toFixed(1) : 0}%
Department Focus: ${department || 'All Departments'}
Report Coverage: Individual performance ratings, project assignments, skill assessments

`;

  // Enhanced Employee Performance Section with detailed metrics
  if (employees.length > 0) {
    content += `DETAILED TEAM PERFORMANCE ANALYSIS
========================================

`;
    employees.forEach((employee, index) => {
      const rating = employee.performance || employee.rating || 0;
      const stars = '★'.repeat(Math.floor(rating / 20)) + '☆'.repeat(5 - Math.floor(rating / 20));
      const performanceLevel = rating >= 90 ? 'EXCELLENT' : rating >= 80 ? 'GOOD' : rating >= 70 ? 'AVERAGE' : 'NEEDS IMPROVEMENT';
      
      content += `${index + 1}. ${employee.name.toUpperCase()}
   Employee ID: ${employee.id}
   Position: ${employee.position || 'Not specified'}
   Department: ${department || employee.department || 'Not specified'}
   
   PERFORMANCE METRICS:
   Overall Score: ${rating}% ${stars} [${performanceLevel}]
   Email: ${employee.email || 'Not available'}
   
   PROJECT INVOLVEMENT:
   ${employee.projects ? `Active Projects: ${employee.projects.join(', ')}` : 'No active projects assigned'}
   
   SKILL ASSESSMENT:
   ${employee.skills ? `Technical Skills: ${employee.skills.join(', ')}` : 'Skills assessment pending'}
   
   EMPLOYMENT DETAILS:
   ${employee.joinDate ? `Start Date: ${employee.joinDate}` : 'Start date not recorded'}
   ${employee.lastReview ? `Last Performance Review: ${employee.lastReview}` : 'Performance review pending'}
   
   PERFORMANCE BREAKDOWN:
   - Productivity: ${rating >= 90 ? 'Exceptional' : rating >= 80 ? 'Above Average' : rating >= 70 ? 'Satisfactory' : 'Below Expectations'}
   - Team Collaboration: ${rating >= 85 ? 'Excellent team player' : 'Developing collaboration skills'}
   - Quality of Work: ${rating >= 90 ? 'Consistently high quality' : 'Meeting quality standards'}
   - Initiative & Innovation: ${rating >= 85 ? 'Proactive and innovative' : 'Follows established processes'}

   DEVELOPMENT RECOMMENDATIONS:
   ${rating >= 90 ? '- Consider for leadership roles\n   - Mentor junior team members\n   - Lead complex projects' : 
     rating >= 80 ? '- Advanced skill training opportunities\n   - Cross-functional project assignments\n   - Professional development courses' : 
     '- Focused skill development plan\n   - Regular mentoring sessions\n   - Performance improvement program'}

========================================

`;
    });

    // Enhanced Summary Statistics
    const avgPerformance = employees.reduce((sum, emp) => sum + (emp.performance || emp.rating || 0), 0) / employees.length;
    const topPerformer = employees.reduce((top, emp) => 
      (emp.performance || emp.rating || 0) > (top.performance || top.rating || 0) ? emp : top
    );
    const excellentPerformers = employees.filter(e => (e.performance || e.rating || 0) >= 90);
    const goodPerformers = employees.filter(e => (e.performance || e.rating || 0) >= 80 && (e.performance || e.rating || 0) < 90);
    const averagePerformers = employees.filter(e => (e.performance || e.rating || 0) >= 70 && (e.performance || e.rating || 0) < 80);
    const belowAverage = employees.filter(e => (e.performance || e.rating || 0) < 70);

    content += `
COMPREHENSIVE TEAM ANALYTICS
========================================

PERFORMANCE DISTRIBUTION:
- Excellent Performers (90-100%): ${excellentPerformers.length} members (${((excellentPerformers.length / employees.length) * 100).toFixed(1)}%)
  ${excellentPerformers.map(e => `  • ${e.name} - ${e.performance || e.rating}%`).join('\n  ')}

- Good Performers (80-89%): ${goodPerformers.length} members (${((goodPerformers.length / employees.length) * 100).toFixed(1)}%)
  ${goodPerformers.map(e => `  • ${e.name} - ${e.performance || e.rating}%`).join('\n  ')}

- Average Performers (70-79%): ${averagePerformers.length} members (${((averagePerformers.length / employees.length) * 100).toFixed(1)}%)
  ${averagePerformers.map(e => `  • ${e.name} - ${e.performance || e.rating}%`).join('\n  ')}

- Below Average (<70%): ${belowAverage.length} members (${((belowAverage.length / employees.length) * 100).toFixed(1)}%)
  ${belowAverage.map(e => `  • ${e.name} - ${e.performance || e.rating}%`).join('\n  ')}

TEAM PERFORMANCE INSIGHTS:
- Team Average: ${avgPerformance.toFixed(1)}%
- Top Performer: ${topPerformer.name} (${topPerformer.performance || topPerformer.rating || 0}%)
- Performance Range: ${Math.min(...employees.map(e => e.performance || e.rating || 0))}% - ${Math.max(...employees.map(e => e.performance || e.rating || 0))}%
- Team Consistency: ${avgPerformance >= 85 ? 'High - Team consistently performs well' : avgPerformance >= 75 ? 'Moderate - Generally good with some variations' : 'Low - Significant performance gaps exist'}

SKILL ANALYSIS:
- Most Common Skills: React, JavaScript, TypeScript, Node.js, Python
- Skill Coverage: Full-stack development capabilities
- Training Opportunities: ${belowAverage.length > 0 ? `${belowAverage.length} members would benefit from additional training` : 'Team is well-trained across all areas'}

WORKFORCE INSIGHTS:
- Recent Hires (2023+): ${employees.filter(e => e.joinDate && new Date(e.joinDate) > new Date('2023-01-01')).length} members
- Review Status: ${employees.filter(e => e.lastReview && new Date(e.lastReview) < new Date(Date.now() - 90 * 24 * 60 * 60 * 1000)).length} members due for review
- Retention Recommendations: Focus on ${belowAverage.length > 0 ? 'performance improvement programs' : 'career advancement opportunities'}

ACTION ITEMS:
1. Schedule performance reviews for ${employees.filter(e => !e.lastReview || new Date(e.lastReview) < new Date(Date.now() - 90 * 24 * 60 * 60 * 1000)).length} team members
2. Implement mentorship program pairing top performers with developing team members
3. ${belowAverage.length > 0 ? `Create performance improvement plans for ${belowAverage.length} underperforming members` : 'Continue current performance management strategies'}
4. Consider ${excellentPerformers.length} high performers for leadership development programs

`;
  }

  // Client Portfolio Section - ENHANCED
  if (clients.length > 0) {
    content += `CLIENT PORTFOLIO SUMMARY
========================================

`;
    clients.forEach((client, index) => {
      content += `${index + 1}. ${client.name}
   Company: ${client.company}
   Status: ${client.status.toUpperCase()}
   Departments: ${client.departments.join(', ') || 'None'}
   Active Projects: ${client.projects.length}
   Tags: ${client.tags.join(', ') || 'None'}
   Contact: ${client.contactEmail}
   Phone: ${client.contactPhone}

`;
    });

    content += `
CLIENT STATISTICS:
- Total Clients: ${clients.length}
- Active Clients: ${clients.filter(c => c.status === 'active').length}
- Inactive Clients: ${clients.filter(c => c.status === 'inactive').length}
- Total Projects: ${clients.reduce((sum, c) => sum + c.projects.length, 0)}

`;
  }

  // Projects Section - ENHANCED WITH MORE DETAILS
  if (projects.length > 0) {
    content += `PROJECT SUMMARY
========================================

`;
    projects.forEach((project, index) => {
      content += `${index + 1}. ${project.name}
   Status: ${project.status?.toUpperCase() || 'Not specified'}
   Department: ${project.assignedDepartment || 'Unassigned'}
   Client: ${project.clientName || 'Not specified'}
   ${project.progress ? `Progress: ${project.progress}%` : ''}
   ${project.startDate ? `Start Date: ${project.startDate}` : ''}
   ${project.expectedCompletion ? `Expected Completion: ${project.expectedCompletion}` : ''}
   ${project.budget ? `Budget: ${project.budget}` : ''}
   ${project.priority ? `Priority: ${project.priority}` : ''}
   ${project.teamMembers ? `Team Members: ${project.teamMembers.join(', ')}` : ''}

`;
    });

    // Add project analytics
    const workingProjects = projects.filter(p => p.status === 'working');
    const avgProgress = projects.filter(p => p.progress).reduce((sum, p) => sum + (p.progress || 0), 0) / projects.filter(p => p.progress).length || 0;
    
    content += `
PROJECT ANALYTICS:
- Total Projects: ${projects.length}
- Active Projects: ${workingProjects.length}
- Average Progress: ${avgProgress.toFixed(1)}%
- High Priority Projects: ${projects.filter(p => p.priority === 'High').length}
- Projects Behind Schedule: ${projects.filter(p => p.progress && p.progress < 50).length}

`;
  }

  if (employees.length === 0 && clients.length === 0 && projects.length === 0) {
    content += 'No data available for this report.';
  }

  content += `

========================================
CONFIDENTIAL PERFORMANCE REPORT
Generated by: ${generatedBy || 'Management System'}
${restrictedAccess ? 'ACCESS RESTRICTED TO AUTHORIZED PERSONNEL ONLY' : ''}
Report Date: ${timestamp}
========================================`;

  return content;
};

export const generateExcelContent = (data: ReportData) => {
  const { employees = [], clients = [], projects = [], department, teamLead, reportType, dateRange, userRole, restrictedAccess, generatedBy } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  let content = `PERFORMANCE REPORT METADATA\n`;
  content += `Report Type,${reportType}\n`;
  content += `Department,${department || 'All Departments'}\n`;
  content += `Team Lead,${teamLead || 'N/A'}\n`;
  content += `Generated By,${generatedBy || userRole || 'N/A'}\n`;
  content += `Generated On,${timestamp}\n`;
  content += `Period,${dateRange}\n`;
  content += `Access Level,${restrictedAccess ? 'RESTRICTED' : 'STANDARD'}\n\n`;

  // Enhanced Employee Performance Data
  if (employees.length > 0) {
    content += 'DETAILED EMPLOYEE PERFORMANCE DATA\n';
    content += 'Employee ID,Name,Position,Department,Performance Score,Performance Level,Rating Stars,Email,Active Projects,Key Skills,Join Date,Last Review,Development Priority,Recommended Actions\n';

    employees.forEach(employee => {
      const performance = employee.performance || employee.rating || 0;
      const level = performance >= 90 ? 'EXCELLENT' : 
                   performance >= 80 ? 'GOOD' : 
                   performance >= 70 ? 'AVERAGE' : 'NEEDS IMPROVEMENT';
      const stars = '★'.repeat(Math.floor(performance / 20)) + '☆'.repeat(5 - Math.floor(performance / 20));
      const priority = performance >= 90 ? 'Leadership Development' : 
                      performance >= 80 ? 'Skill Enhancement' : 
                      performance >= 70 ? 'Performance Monitoring' : 'Immediate Improvement';
      const actions = performance >= 90 ? 'Consider for leadership roles; Mentor others' : 
                     performance >= 80 ? 'Advanced training; Complex projects' : 
                     performance >= 70 ? 'Regular coaching; Skill development' : 'Performance improvement plan; Close monitoring';
      
      content += `${employee.id},"${employee.name}","${employee.position || 'Not specified'}","${department || employee.department || 'Not specified'}",${performance}%,${level},"${stars}","${employee.email || 'Not available'}","${employee.projects?.join('; ') || 'None assigned'}","${employee.skills?.join('; ') || 'Assessment pending'}","${employee.joinDate || 'Not recorded'}","${employee.lastReview || 'Pending'}","${priority}","${actions}"\n`;
    });
    
    // Add summary statistics
    const avgPerformance = employees.reduce((sum, emp) => sum + (emp.performance || emp.rating || 0), 0) / employees.length;
    content += `\nPERFORMANCE SUMMARY\n`;
    content += `Metric,Value\n`;
    content += `Total Employees,${employees.length}\n`;
    content += `Average Performance,${avgPerformance.toFixed(1)}%\n`;
    content += `Excellent Performers (90%+),${employees.filter(e => (e.performance || e.rating || 0) >= 90).length}\n`;
    content += `Good Performers (80-89%),${employees.filter(e => (e.performance || e.rating || 0) >= 80 && (e.performance || e.rating || 0) < 90).length}\n`;
    content += `Average Performers (70-79%),${employees.filter(e => (e.performance || e.rating || 0) >= 70 && (e.performance || e.rating || 0) < 80).length}\n`;
    content += `Below Average (<70%),${employees.filter(e => (e.performance || e.rating || 0) < 70).length}\n`;
    content += '\n';
  }

  // Client Data - ENHANCED
  if (clients.length > 0) {
    content += 'CLIENT PORTFOLIO DATA\n';
    content += 'Client ID,Client Name,Company,Status,Departments,Projects Count,Tags,Contact Email,Contact Phone\n';

    clients.forEach(client => {
      content += `${client.id},"${client.name}","${client.company}",${client.status},"${client.departments.join('; ')}",${client.projects.length},"${client.tags.join('; ')}","${client.contactEmail}","${client.contactPhone}"\n`;
    });
    content += '\n';
  }

  // Project Data - ENHANCED WITH MORE DETAILS
  if (projects.length > 0) {
    content += 'PROJECT DATA\n';
    content += 'Project ID,Project Name,Status,Assigned Department,Client Name,Progress,Start Date,Expected Completion,Budget,Priority,Team Members\n';

    projects.forEach(project => {
      content += `${project.id},"${project.name}",${project.status || 'Not specified'},"${project.assignedDepartment || 'Unassigned'}","${project.clientName || 'Not specified'}","${project.progress ? project.progress + '%' : 'N/A'}","${project.startDate || 'N/A'}","${project.expectedCompletion || 'N/A'}","${project.budget || 'N/A'}","${project.priority || 'N/A'}","${project.teamMembers?.join('; ') || 'None'}"\n`;
    });
  }

  return content;
};

export const downloadFile = (content: string, filename: string, mimeType: string) => {
  try {
    // Ensure content is not empty
    if (!content || content.trim().length === 0) {
      console.error('No content to download');
      return false;
    }

    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    console.log('File downloaded successfully:', filename);
    return true;
  } catch (error) {
    console.error('Download failed:', error);
    return false;
  }
};

// Helper function to prepare report data for different user roles - ENHANCED
export const prepareReportData = (rawData: any[], userRole: string, userDepartment?: string): ReportData => {
  let filteredData = rawData;
  
  // Filter data based on user role - STRICT FILTERING FOR TEAM LEADS
  if (userRole === 'teamlead' && userDepartment) {
    filteredData = rawData.filter(item => 
      item.department === userDepartment || 
      item.assignedDepartment === userDepartment ||
      item.departments?.includes(userDepartment)
    );
  }
  
  return {
    employees: filteredData.filter(item => item.name && (item.performance !== undefined || item.rating !== undefined)),
    clients: filteredData.filter(item => item.company),
    projects: filteredData.filter(item => item.assignedDepartment !== undefined),
    reportType: 'Performance Report',
    dateRange: 'Current Period',
    userRole,
    department: userDepartment,
    restrictedAccess: userRole === 'teamlead'
  };
};
