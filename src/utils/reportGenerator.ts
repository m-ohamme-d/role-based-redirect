
interface Employee {
  id: number | string;
  name: string;
  department?: string;
  position?: string;
  performance?: number;
  rating?: number;
  email?: string;
}

interface Client {
  id: number;
  name: string;
  company: string;
  status: string;
  departments: string[];
  tags: string[];
  projects: any[];
  contactEmail: string;
  contactPhone: string;
}

interface ReportData {
  employees?: Employee[];
  clients?: Client[];
  projects?: any[];
  department?: string;
  teamLead?: string;
  reportType: string;
  dateRange: string;
  userRole?: string;
}

export const generatePDFContent = (data: ReportData) => {
  const { employees = [], clients = [], projects = [], department, teamLead, reportType, dateRange, userRole } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  // Validate input data
  if (!employees.length && !clients.length && !projects.length) {
    console.error('No data provided for PDF generation');
    return 'ERROR: No data available for report generation.';
  }

  let content = `PERFORMANCE REPORT
${reportType.toUpperCase()}
${department ? `Department: ${department}` : ''}
${teamLead ? `Team Lead: ${teamLead}` : ''}
${userRole ? `Generated by: ${userRole}` : ''}
Generated on: ${timestamp}
Period: ${dateRange}

========================================

`;

  // Employee Performance Section
  if (employees.length > 0) {
    content += `TEAM PERFORMANCE RATING SUMMARY
========================================

`;
    employees.forEach((employee, index) => {
      const rating = employee.performance || employee.rating || 0;
      const stars = '★'.repeat(Math.floor(rating / 20)) + '☆'.repeat(5 - Math.floor(rating / 20));
      
      content += `${index + 1}. ${employee.name}
   ID: ${employee.id || 'Not specified'}
   Position: ${employee.position || 'Not specified'}
   ${department ? `Department: ${department}` : `Department: ${employee.department || 'Not specified'}`}
   Performance: ${rating}% ${stars}
   Email: ${employee.email || 'Not available'}

`;
    });

    // Add summary statistics
    const avgPerformance = employees.reduce((sum, emp) => sum + (emp.performance || emp.rating || 0), 0) / employees.length;
    const topPerformer = employees.reduce((top, emp) => 
      (emp.performance || emp.rating || 0) > (top.performance || top.rating || 0) ? emp : top
    );

    content += `
========================================
SUMMARY STATISTICS
========================================

Total Employees: ${employees.length}
Average Performance: ${avgPerformance.toFixed(1)}%
Top Performer: ${topPerformer.name} (${topPerformer.performance || topPerformer.rating || 0}%)

Performance Distribution:
- Excellent (90-100%): ${employees.filter(e => (e.performance || e.rating || 0) >= 90).length}
- Good (80-89%): ${employees.filter(e => (e.performance || e.rating || 0) >= 80 && (e.performance || e.rating || 0) < 90).length}
- Average (70-79%): ${employees.filter(e => (e.performance || e.rating || 0) >= 70 && (e.performance || e.rating || 0) < 80).length}
- Below Average (<70%): ${employees.filter(e => (e.performance || e.rating || 0) < 70).length}

`;
  }

  // Client Portfolio Section
  if (clients.length > 0) {
    content += `CLIENT PORTFOLIO SUMMARY
========================================

`;
    clients.forEach((client, index) => {
      content += `${index + 1}. ${client.name}
   Company: ${client.company}
   Status: ${client.status.toUpperCase()}
   Departments: ${client.departments.join(', ') || 'None'}
   Projects: ${client.projects.length}
   Tags: ${client.tags.join(', ') || 'None'}
   Contact: ${client.contactEmail}

`;
    });

    content += `
CLIENT STATISTICS:
- Total Clients: ${clients.length}
- Active Clients: ${clients.filter(c => c.status === 'active').length}
- Inactive Clients: ${clients.filter(c => c.status === 'inactive').length}
- Total Projects: ${clients.reduce((sum, c) => sum + c.projects.length, 0)}

`;
  }

  // Projects Section
  if (projects.length > 0) {
    content += `PROJECT SUMMARY
========================================

`;
    projects.forEach((project, index) => {
      content += `${index + 1}. ${project.name}
   ID: ${project.id || 'Not specified'}
   Status: ${project.status?.toUpperCase() || 'Not specified'}
   Department: ${project.assignedDepartment || 'Unassigned'}
   Client: ${project.clientName || 'Not specified'}
   Progress: ${project.progress || 0}%
   Deadline: ${project.deadline || 'Not specified'}

`;
    });

    // Project summary
    const totalProjects = projects.length;
    const activeProjects = projects.filter(p => p.status === 'working').length;
    const avgProgress = projects.reduce((sum, p) => sum + (p.progress || 0), 0) / totalProjects;

    content += `
PROJECT STATISTICS:
- Total Projects: ${totalProjects}
- Active Projects: ${activeProjects}
- Average Progress: ${avgProgress.toFixed(1)}%

`;
  }

  content += `

========================================
Report generated by Management System
${timestamp}
========================================`;

  console.log('PDF content generated successfully:', {
    contentLength: content.length,
    employeeCount: employees.length,
    clientCount: clients.length,
    projectCount: projects.length
  });

  return content;
};

export const generateExcelContent = (data: ReportData) => {
  const { employees = [], clients = [], projects = [], department, teamLead, reportType, dateRange, userRole } = data;
  const now = new Date();
  const timestamp = now.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  // Validate input data
  if (!employees.length && !clients.length && !projects.length) {
    console.error('No data provided for Excel generation');
    return 'ERROR,No data available for report generation\n';
  }

  let content = `Report Type,${reportType}\n`;
  content += `Department,${department || 'All Departments'}\n`;
  content += `Team Lead,${teamLead || 'N/A'}\n`;
  content += `Generated By,${userRole || 'N/A'}\n`;
  content += `Generated On,${timestamp}\n`;
  content += `Period,${dateRange}\n\n`;

  // Employee Data
  if (employees.length > 0) {
    content += 'EMPLOYEE PERFORMANCE DATA\n';
    content += 'Employee ID,Name,Position,Department,Performance Score,Rating,Email\n';

    employees.forEach(employee => {
      const performance = employee.performance || employee.rating || 0;
      const rating = performance >= 90 ? 'Excellent' : 
                    performance >= 80 ? 'Good' : 
                    performance >= 70 ? 'Average' : 'Below Average';
      
      content += `"${employee.id || 'N/A'}","${employee.name}","${employee.position || 'Not specified'}","${department || employee.department || 'Not specified'}",${performance}%,${rating},"${employee.email || 'Not available'}"\n`;
    });
    content += '\n';
  }

  // Client Data
  if (clients.length > 0) {
    content += 'CLIENT PORTFOLIO DATA\n';
    content += 'Client ID,Client Name,Company,Status,Departments,Projects Count,Tags,Contact Email,Contact Phone\n';

    clients.forEach(client => {
      content += `${client.id},"${client.name}","${client.company}",${client.status},"${client.departments.join('; ')}",${client.projects.length},"${client.tags.join('; ')}","${client.contactEmail}","${client.contactPhone}"\n`;
    });
    content += '\n';
  }

  // Project Data
  if (projects.length > 0) {
    content += 'PROJECT DATA\n';
    content += 'Project ID,Project Name,Status,Assigned Department,Client Name,Progress,Deadline\n';

    projects.forEach(project => {
      content += `"${project.id}","${project.name}","${project.status || 'Not specified'}","${project.assignedDepartment || 'Unassigned'}","${project.clientName || 'Not specified'}","${project.progress || 0}%","${project.deadline || 'Not specified'}"\n`;
    });
  }

  console.log('Excel content generated successfully:', {
    contentLength: content.length,
    employeeCount: employees.length,
    clientCount: clients.length,
    projectCount: projects.length
  });

  return content;
};

export const downloadFile = (content: string, filename: string, mimeType: string) => {
  try {
    // Enhanced validation
    if (!content || content.trim().length === 0) {
      console.error('No content to download');
      return false;
    }

    if (content.startsWith('ERROR')) {
      console.error('Content contains error:', content);
      return false;
    }

    console.log('Initiating file download:', {
      filename,
      mimeType,
      contentLength: content.length,
      contentPreview: content.substring(0, 100) + '...'
    });

    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    console.log('File downloaded successfully:', filename);
    return true;
  } catch (error) {
    console.error('Download failed:', error);
    return false;
  }
};

// Enhanced helper function with better data filtering
export const prepareReportData = (rawData: any[], userRole: string, userDepartment?: string): ReportData => {
  console.log('Preparing report data:', {
    rawDataLength: rawData.length,
    userRole,
    userDepartment
  });

  let filteredData = rawData;
  
  // Filter data based on user role
  if (userRole === 'teamlead' && userDepartment) {
    filteredData = rawData.filter(item => 
      item.department === userDepartment || 
      item.departments?.includes(userDepartment) ||
      item.assignedDepartment === userDepartment
    );
    
    console.log('Filtered data for team lead:', {
      originalCount: rawData.length,
      filteredCount: filteredData.length,
      department: userDepartment
    });
  }
  
  const result = {
    employees: filteredData.filter(item => item.name && (item.performance !== undefined || item.rating !== undefined)),
    clients: filteredData.filter(item => item.company),
    projects: filteredData.filter(item => item.assignedDepartment !== undefined || item.status),
    reportType: 'Performance Report',
    dateRange: 'Current Period',
    userRole,
    department: userDepartment
  };

  console.log('Prepared report data:', {
    employeeCount: result.employees.length,
    clientCount: result.clients.length,
    projectCount: result.projects.length
  });

  return result;
};
